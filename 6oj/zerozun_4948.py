# 문제
# 베르트랑 공준은 임의의 자연수 n에 대하여, n보다 크고, 2n보다 작거나 같은 소수는 적어도 하나 존재한다는 내용을 담고 있다.
#
# 이 명제는 조제프 베르트랑이 1845년에 추측했고, 파프누티 체비쇼프가 1850년에 증명했다.
#
# 예를 들어, 10보다 크고, 20보다 작거나 같은 소수는 4개가 있다. (11, 13, 17, 19)
#
# 또, 14보다 크고, 28보다 작거나 같은 소수는 3개가 있다. (17,19, 23)
#
# 자연수 n이 주어졌을 때, n보다 크고, 2n보다 작거나 같은 소수의 개수를 구하는 프로그램을 작성하시오.
#
# 입력
# 입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 케이스는 n을 포함하는 한 줄로 이루어져 있다.
#
# 입력의 마지막에는 0이 주어진다.
#
# 출력
# 각 테스트 케이스에 대해서, n보다 크고, 2n보다 작거나 같은 소수의 개수를 출력한다.
#
# 제한
# 1 ≤ n ≤ 123,456
import sys

input = sys.stdin.readline
lst = []
while 1:
    t = int(input())
    lst.append(t)
    if t == 0:
        break
# 1을 제외하고 1/2까지 나눠지는 수가 없다면 소수이다.
lst2 = []
for i in range(len(lst) - 1):
    cnt = 0  # lst[i] 바뀔때 마다 cnt 초기화
    for j in range(lst[i] + 1, (2 * lst[i]) + 1):  # j는 n부터 2n까지
        if lst[i] == 1:
            lst2.append(1)
            break
        for k in range(2, (j // 2) + 1):
            # j는 판별할 수. k는 나눠줄수, 절반까지 가기전에 나머지가 0, 나눠진다면 필요없어
            if j % k == 0:
                break
            if k == (j // 2):
                cnt += 1
    lst2.append(cnt)
for i in range(len(lst2)):
    if lst2[i] != 0:
        print(lst2[i])

# 시간초과남
